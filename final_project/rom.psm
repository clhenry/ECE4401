;--------------------------------
; Output Port IDs
;--------------------------------
CONSTANT spi_tx_data_pid, 00;
CONSTANT spi_control_pid, 01;
CONSTANT spi_csn_pid, 02;
CONSTANT spi_ce_pid, 03;

CONSTANT led_pid, 04;

CONSTANT counter_config0_pid, 05;
CONSTANT counter_config1_pid, 06;
CONSTANT counter_config2_pid, 07;
CONSTANT counter_control_pid, 08;

CONSTANT rx_buf_data_pid, 09;
CONSTANT rx_buf_addr_pid, 0A;
CONSTANT rx_buf_we_pid, 0B;

CONSTANT tx_buf_addr_pid, 0C;

CONSTANT reset_tx_buffer_ready_pid, 0D;

CONSTANT interrupt_wb_pid, 0F;

;-----------------------------
; Input Port IDs
;-----------------------------
CONSTANT spi_rx_data_pid, 00;
CONSTANT spi_status_pid, 01;
CONSTANT spi_interrupt_pid, 02;

CONSTANT counter_status_pid, 03;

CONSTANT tx_buf_data_pid, 04;

CONSTANT tx_buffer_ready_pid, 05;


NAMEREG s0, tx_buffer_data;
NAMEREG s1, tx_buffer_address;
NAMEREG s2, rx_buffer_data;
NAMEREG s3, rx_buffer_address;

; Argument registers
NAMEREG s7, arg0;
NAMEREG s8, arg1;
NAMEREG s9, arg2;
NAMEREG sA, arg3;

; Temporary registers
NAMEREG sB, temp0;
NAMEREG sC, temp1;
NAMEREG sD, temp2;
NAMEREG sE, temp3;
; Return value
NAMEREG sF, ret0;

MAIN:
        LOAD temp0, 00;
        OUTPUT temp0, interrupt_wb_pid;
        CALL SPI_CE_LOW;
        CALL SPI_CSN_HIGH;
        CALL RX_BUF_WE_LOW;
        CALL NRF24L01_POWER_UP;
        CALL NRF24L01_SET_RX_PIPE_ADDR;
        CALL NRF24L01_SET_RX_PAYLOAD_WIDTH;
        CALL NRF24L01_SET_TX_ADDR;
        CALL NRF24L01_PRIMRX_MODE;

        ENABLE INTERRUPT;
IDLE:
        LOAD temp3, temp3;
        JUMP IDLE;

;---------------------------------------------
; SPI Functions
;---------------------------------------------
; Writes a byte to the SPI module while
; waiting for it to complete its transaction.
; It returns the value that was simultaneously
; clocked in by the SPI slave device. 
;---------------------------------------------
SPI_WRITE_DATA:
        OUTPUT arg0, spi_tx_data_pid;
SPI_PULSE_ENABLE:
        LOAD temp0, 01; Write to bit0 to bring the enable bit high
        OUTPUT temp0, spi_control_pid;
        LOAD temp0, 00; Clear bit0 to bring enable bit low
        OUTPUT temp0, spi_control_pid; 
SPI_BUSY:
        INPUT temp0, spi_status_pid;
        COMPARE temp0, 01; bit0 is the active high busy flag
        JUMP Z, SPI_BUSY;
SPI_READ_DATA:
        INPUT ret0, spi_rx_data_pid;
        RETURN;

SPI_CSN_HIGH:
        LOAD temp0, 01;
        OUTPUT temp0, spi_csn_pid;
        RETURN;

SPI_CSN_LOW:
        LOAD temp0, 00;
        OUTPUT temp0, spi_csn_pid;
        RETURN;

SPI_CE_HIGH:
        LOAD temp0, 01;
        OUTPUT temp0, spi_ce_pid;
        RETURN;

SPI_CE_LOW:
        LOAD temp0, 00;
        OUTPUT temp0, spi_ce_pid;
        RETURN;

;------------------------------------
; Counter Delay Functions
;------------------------------------
WAIT:
        OUTPUT arg0, counter_config0_pid;
        OUTPUT arg1, counter_config1_pid;
        OUTPUT arg2, counter_config2_pid;
        ; Pulse counter enable signal
        LOAD temp0, 01;
        OUTPUT temp0, counter_control_pid;
        LOAD temp0, 00;
        OUTPUT temp0, counter_control_pid;
COUNTER_IS_COUNTING:
        INPUT temp0, counter_status_pid;
        COMPARE temp0, 01;
        JUMP NZ, COUNTER_IS_COUNTING;
        RETURN;

WAIT_10US:
      LOAD arg0, F4;
      LOAD arg1, 01;
      LOAD arg2, 00;
      CALL WAIT;
      RETURN;

WAIT_4500US:
      LOAD arg0, E8;
      LOAD arg1, 6E;
      LOAD arg2, 03;
      CALL WAIT;
      RETURN;

WAIT_130US:
      LOAD arg0, 64;
      LOAD arg1, 19;
      LOAD arg2, 00;
      CALL WAIT;
      RETURN;

WAIT_100MS:
      LOAD arg0, 40;
      LOAD arg1, 4B;
      LOAD arg2, 4C;
      CALL WAIT;
      RETURN;

;---------------------------------------
; NRF24L01 Functions
;---------------------------------------
NRF24L01_POWER_UP:
        ; Set counter to count for 100ms (0x4C4B40 system clocks) before entering the 'Power Down' state
        CALL WAIT_100MS;
        CALL SPI_CSN_LOW;
        LOAD arg0, 20; W_REGISTER, CONFIG
        CALL SPI_WRITE_DATA;
        LOAD arg0, 0A;EN_CRC, PWR_UP bits
        CALL SPI_WRITE_DATA;
        CALL SPI_CSN_HIGH;
        ; Set counter to count for 4.5ms (0x036EE8 system clocks) before entering the 'Standby I' state
        CALL WAIT_4500US;
        RETURN;

NRF24L01_SET_RX_PIPE_ADDR:
        CALL SPI_CSN_LOW;
        LOAD arg0, 2A; W_REGISTER, RX_ADDR_P0
        CALL SPI_WRITE_DATA;
        ; Using address 0x22 85 41 16 47
        LOAD arg0, 47;
        CALL SPI_WRITE_DATA;
        LOAD arg0, 16;
        CALL SPI_WRITE_DATA;
        LOAD arg0, 41;
        CALL SPI_WRITE_DATA;
        LOAD arg0, 85;
        CALL SPI_WRITE_DATA;
        LOAD arg0, 22;
        CALL SPI_WRITE_DATA;
        CALL SPI_CSN_HIGH;
        RETURN;

NRF24L01_SET_RX_PAYLOAD_WIDTH:
        CALL SPI_CSN_LOW;
        LOAD arg0, 31; W_REGISTER, RX_PW_P0
        CALL SPI_WRITE_DATA;
        LOAD arg0, 01; Set expected payload width to 1 byte
        CALL SPI_WRITE_DATA;
        CALL SPI_CSN_HIGH;
        RETURN;

NRF24L01_SET_TX_ADDR:
        CALL SPI_CSN_LOW;
        LOAD arg0, 30; W_REGISTER, TX_ADDR
        CALL SPI_WRITE_DATA;
        ; Using address 0x22 85 41 16 47
        LOAD arg0, 47;
        CALL SPI_WRITE_DATA;
        LOAD arg0, 16;
        CALL SPI_WRITE_DATA;
        LOAD arg0, 41;
        CALL SPI_WRITE_DATA;
        LOAD arg0, 85;
        CALL SPI_WRITE_DATA;
        LOAD arg0, 22;
        CALL SPI_WRITE_DATA;
        CALL SPI_CSN_HIGH;
        RETURN;

NRF24L01_PRIMRX_MODE:
        CALL SPI_CSN_LOW;
        LOAD arg0, 20; W_REGISTER, CONFIG
        CALL SPI_WRITE_DATA;
        LOAD arg0, 0B; EN_CRC, PWR_UP, PRX
        CALL SPI_WRITE_DATA;
        CALL SPI_CSN_HIGH;
        CALL SPI_CE_HIGH;
        ; Set counter to count for 130us (0x001964 system clocks) before entering the 'RX Mode' state
        CALL WAIT_130US;
        RETURN;

NRF24L01_STATUS:
        CALL SPI_CSN_LOW;
        LOAD arg0, FF;
        CALL SPI_WRITE_DATA;
        CALL SPI_CSN_HIGH;
        RETURN;

NRF24L01_WRITE_TX_PAYLOAD:
        ; arg0 is data to be written to payload buffer
        CALL SPI_CSN_LOW;
        LOAD temp3, arg0; temporarily store arg0 in temp3
        LOAD arg0, A0; W_TX_PAYLOAD
        CALL SPI_WRITE_DATA;
        LOAD arg0, temp3; reload original payload back into arg0
        CALL SPI_WRITE_DATA;
        CALL SPI_CSN_HIGH;
        RETURN;

NRF24L01_READ_RX_PAYLOAD:
        CALL SPI_CSN_LOW;
        LOAD arg0, 61; R_RX_PAYLOAD;
        CALL SPI_WRITE_DATA;
        LOAD arg0, FF; NOP
        CALL SPI_WRITE_DATA;
        CALL SPI_CSN_HIGH;
        RETURN;

NRF24L01_CLEAR_IRQ_FLAGS:
        ;; DEBUG
        CALL SPI_CSN_LOW;
        LOAD arg0, 07; W_REGISTER, STATUS;
        CALL SPI_WRITE_DATA;
        LOAD arg0, FF;
        CALL SPI_WRITE_DATA;
        ;OUTPUT ret0, led_pid;
        CALL SPI_CSN_HIGH;
        CALL SPI_CSN_LOW;
        LOAD arg0, 27; W_REGISTER, STATUS;
        CALL SPI_WRITE_DATA;
        LOAD arg0, 70;
        CALL SPI_WRITE_DATA;
        CALL SPI_CSN_HIGH;
        RETURN;

NRF24L01_PRIMTX_MODE:
        CALL SPI_CE_LOW;
        CALL SPI_CSN_LOW;
        LOAD arg0, 20; W_REGISTER, CONFIG;
        CALL SPI_WRITE_DATA;
        LOAD arg0, 0A; EN_CRC, PWR_UP, PTX
        CALL SPI_WRITE_DATA;
        CALL SPI_CSN_HIGH;
        RETURN;

NRF24L01_TRANSMIT:
        CALL SPI_CE_HIGH;
        CALL WAIT_10US;
        CALL SPI_CE_LOW;
        ;CALL WAIT_130US;
ACK_WAIT:
        INPUT temp0, spi_interrupt_pid;
        COMPARE temp0, 01;
        JUMP NZ, ACK_WAIT;
        ;CALL NRF24L01_CLEAR_IRQ_FLAGS;
STATUS_CHECK:
        CALL NRF24L01_STATUS;
        LOAD temp0, ret0;
        AND temp0, 20; TX_DS bit positition
        JUMP NZ, CLEAR_TX_DS;
CLEAR_MAX_RT:
        CALL SPI_CSN_LOW
        LOAD arg0, 27; W_REGISTER, STATUS
        CALL SPI_WRITE_DATA;
        LOAD arg0, 10; Clear MAX_RT by writing '1' to its bit position
        CALL SPI_WRITE_DATA;
        CALL SPI_CSN_HIGH
        RETURN;
CLEAR_TX_DS:
        CALL SPI_CSN_LOW
        LOAD arg0, 27; W_REGISTER, STATUS
        CALL SPI_WRITE_DATA;
        LOAD arg0, 20; Clear TX_DS by writing '1' to its bit position
        CALL SPI_WRITE_DATA;
        CALL SPI_CSN_HIGH
        RETURN;

;;NFR24L01_READ_RX_PAYLOAD:
;;        CALL SPI_CSN_LOW;
;;        LOAD arg0, 61; R_RX_PAYLOAD;
;;        CALL SPI_WRITE_DATA;
;;        LOAD arg0, FF; NOP
;;        CALL SPI_WRITE_DATA;
;;        CALL SPI_CSN_HIGH;
;;NRF24L01_CLEAR_RX_IRQ:
;;        CALL SPI_CSN_LOW;
;;        LOAD arg0, 27; W_REGISTER, STATUS
;;        CALL SPI_WRITE_DATA;
;;        LOAD arg0, 40; Clear RX_DR bit by writing '1' to it
;;        CALL SPI_WRITE_DATA;
;;        CALL SPI_CSN_HIGH;
;;        RETURN;

NRF24L01_FLUSH_TX_FIFO:
        CALL SPI_CSN_LOW;
        LOAD arg0, E1; FLUSH_TX
        CALL SPI_WRITE_DATA;
        CALL SPI_CSN_HIGH;
        RETURN;

;----------------------------------------------------
; Message Buffer Functions
;----------------------------------------------------
RX_BUF_WE_LOW:
        LOAD temp0, 00;
        OUTPUT temp0, rx_buf_we_pid;
        RETURN;

RX_BUF_WE_HIGH:
        LOAD temp0, 01;
        OUTPUT temp0, rx_buf_we_pid;
        RETURN;

TX_BUF_READ:
        ; arg0 is address
        OUTPUT arg0, tx_buf_addr_pid;
        ;LOAD temp3, temp3; NOT SURE IF NECESSARY?!
        INPUT ret0, tx_buf_data_pid;
        RETURN;

RX_BUF_WRITE:
        ; arg0 is address
        ; arg1 is data
        OUTPUT arg0, rx_buf_addr_pid;
        OUTPUT arg1, rx_buf_data_pid;
        CALL RX_BUF_WE_HIGH;
        CALL RX_BUF_WE_LOW;
        RETURN;

RX_BUF_RECEIVE:
        LOAD rx_buffer_address, 00;
RECEIVE_LOOP:
        OUTPUT rx_buffer_address, rx_buf_addr_pid;
        CALL NRF24L01_READ_RX_PAYLOAD;
        LOAD rx_buffer_data, ret0;
        OUTPUT rx_buffer_data, rx_buf_data_pid;
        CALL RX_BUF_WE_HIGH;
        CALL RX_BUF_WE_LOW;
        COMPARE rx_buffer_data, FF;
        JUMP NZ, RECEIVE_LOOP;
        ; DEBUG
        CALL NRF24L01_STATUS;
        OUTPUT ret0, led_pid;
        ; END DEBUG
        CALL NRF24L01_CLEAR_IRQ_FLAGS;
        ; Interrupt wishbone master 
        RETURN;

TX_BUF_TRANSMIT:
        CALL NRF24L01_PRIMTX_MODE;
        LOAD tx_buffer_address, 00;
TRANSMIT_LOOP:
        CALL NRF24L01_FLUSH_TX_FIFO;
        LOAD arg0, tx_buffer_address;
        CALL TX_BUF_READ;
        LOAD tx_buffer_data, ret0;
        LOAD arg0, tx_buffer_data;
        CALL NRF24L01_WRITE_TX_PAYLOAD;
        CALL NRF24L01_TRANSMIT;
        ADD tx_buffer_address, 01;
        COMPARE tx_buffer_data, FF;
        JUMP NZ, TRANSMIT_LOOP;
TX_BUF_INTERRUPT_RESET:
        LOAD temp0, 01;
        OUTPUT temp0, reset_tx_buffer_ready_pid;
        LOAD temp0, 00;
        OUTPUT temp0, reset_tx_buffer_ready_pid;
        CALL NRF24L01_PRIMRX_MODE;
        RETURN;

;-------------------------------------------------
; Picoblaze System Interrupt Functions
;-------------------------------------------------
INTERRUPT_HANDLER:
        ; Check if interrupt came from wishbone master
        INPUT temp0, tx_buffer_ready_pid;
        COMPARE temp0, 01;
        CALL Z, TX_BUF_TRANSMIT;
        INPUT temp0, spi_interrupt_pid;
        COMPARE temp0, 01;
        CALL Z, RX_BUF_RECEIVE;
        RETURNI ENABLE;

        ADDRESS 3FF;
        JUMP INTERRUPT_HANDLER;
